use device: cuda:0
use device: cuda:0
[ 10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27
  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45
  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63
  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81
  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99
 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117
 118 119 120 121 122 123 124 125 126 127 128 129]
[130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147
 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165
 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183
 184 185 186 187 188 189]
[ 10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27
  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45
  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63
  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81
  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99
 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117
 118 119 120 121 122 123 124 125 126 127 128 129]
[130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147
 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165
 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183
 184 185 186 187 188 189]
[ 10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27
  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45
  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63
  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81
  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99
 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117
 118 119 120 121 122 123 124 125 126 127 128 129]
[130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147
 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165
 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183
 184 185 186 187 188 189]
data structure: [lines, timesteps, features]
train data size: [(122030, 120, 1)]
mytest data size: [(21356, 120, 1)]
Number of classes: 4
/root/ml/lib/python3.10/site-packages/torch/cuda/__init__.py:546: UserWarning: Can't initialize NVML
  warnings.warn("Can't initialize NVML")
  0%|                                                                                                           | 0/5 [00:00<?, ?it/s]/root/DNNM/mach5 baseline/run.py:206: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  pre = torch.tensor(y_pre).cpu().detach().numpy()[0].squeeze()
/root/DNNM/mach5 baseline/run.py:207: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(y).cpu().detach().numpy()[0].squeeze()
/root/ml/lib/python3.10/site-packages/torch/nn/modules/activation.py:1160: UserWarning: Converting mask without torch.bool dtype to bool; this will negatively affect performance. Prefer to use a boolean mask directly. (Triggered internally at ../aten/src/ATen/native/transformers/attention.cpp:150.)
  return torch._native_multi_head_attention(
/root/DNNM/mach5 baseline/run.py:245: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  pre = torch.tensor(y_pre).cpu().detach().numpy()[0].squeeze()
/root/DNNM/mach5 baseline/run.py:246: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(y).cpu().detach().numpy()[0].squeeze()
tensor([[ 5.0492e-01],
        [-3.2031e-02],
        [ 1.0860e-02],
        [-1.9965e-01],
        [ 8.7181e-01],
        [ 6.2176e-01],
        [ 1.1821e+00],
        [-1.0838e-02],
        [ 1.3075e+00],
        [-1.3183e-02],
        [ 7.9384e-01],
        [-2.3590e-01],
        [ 7.5411e-01],
        [-5.2767e-01],
        [-1.6919e-01],
        [-1.1235e+00],
        [ 9.2767e-01],
        [-2.1034e-01],
        [-8.0583e-02],
        [ 2.8220e-01],
        [-1.1442e-01],
        [-2.9114e-01],
        [-9.0576e-03],
        [ 1.4364e-01],
        [-1.5451e+00],
        [ 9.2832e-01],
        [ 4.3861e-01],
        [-6.8172e-02],
        [ 6.0826e-02],
        [-9.1541e-01],
        [ 8.0441e-01],
        [-1.1379e-01],
        [-3.2494e-01],
        [-4.0713e-01],
        [ 1.3695e-01],
        [-5.2836e-01],
        [-5.7994e-01],
        [-6.1253e-04],
        [ 2.4624e-01],
        [-1.7590e-01],
        [-1.3862e-01],
        [-1.9889e-02],
        [-3.0520e-01],
        [-1.3575e+00],
        [-3.4659e-01],
        [ 4.1316e-01],
        [ 1.3236e+00],
        [-1.2103e+00],
        [ 4.0273e-01],
        [-5.4656e-01],
        [ 1.2325e-02],
        [ 1.1810e-01],
        [ 3.6552e-01],
        [ 1.6438e-01],
        [ 2.2393e-01],
        [-1.0720e-01],
        [ 1.3688e+00],
        [ 3.9781e-02],
        [-3.0591e-01],
        [-5.6206e-01]], device='cuda:0')
tensor([[ 0.5673],
        [-0.0312],
        [ 0.0208],
        [-0.2131],
        [ 0.9802],
        [ 0.6979],
        [ 1.3159],
        [-0.0181],
        [ 1.4413],
        [-0.0181],
        [ 0.8703],
        [-0.2622],
        [ 0.8282],
        [-0.5804],
        [-0.1851],
        [-1.2135],
        [ 1.0130],
        [-0.2238],
        [-0.0824],
        [ 0.3165],
        [-0.1209],
        [-0.3139],
        [-0.0052],
        [ 0.1621],
        [-1.6650],
        [ 1.0150],
        [ 0.4844],
        [-0.0695],
        [ 0.0721],
        [-0.9833],
        [ 0.8848],
        [-0.1210],
        [-0.3528],
        [-0.4433],
        [ 0.1496],
        [-0.5725],
        [-0.6250],
        [ 0.0079],
        [ 0.2792],
        [-0.1861],
        [-0.1474],
        [-0.0181],
        [-0.3285],
        [-1.4671],
        [-0.3686],
        [ 0.4625],
        [ 1.4509],
        [-1.3013],
        [ 0.4489],
        [-0.5884],
        [ 0.0208],
        [ 0.1376],
        [ 0.4099],
        [ 0.1892],
        [ 0.2539],
        [-0.1088],
        [ 1.4970],
        [ 0.0464],
        [-0.3278],
        [-0.5993]], device='cuda:0')
 20%|███████████████████▌                                                                              | 1/5 [09:16<37:06, 556.60s/it]/root/DNNM/mach5 baseline/run.py:209: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
  fig, ax = plt.subplots()
tensor([[ 0.5533],
        [-0.0415],
        [ 0.0112],
        [-0.2248],
        [ 0.9692],
        [ 0.6872],
        [ 1.3043],
        [-0.0279],
        [ 1.4331],
        [-0.0277],
        [ 0.8619],
        [-0.2730],
        [ 0.8167],
        [-0.5953],
        [-0.1977],
        [-1.2327],
        [ 1.0028],
        [-0.2350],
        [-0.0932],
        [ 0.3049],
        [-0.1328],
        [-0.3261],
        [-0.0154],
        [ 0.1525],
        [-1.6840],
        [ 1.0087],
        [ 0.4735],
        [-0.0804],
        [ 0.0616],
        [-0.9993],
        [ 0.8767],
        [-0.1309],
        [-0.3634],
        [-0.4542],
        [ 0.1411],
        [-0.5839],
        [-0.6375],
        [-0.0023],
        [ 0.2691],
        [-0.1970],
        [-0.1573],
        [-0.0274],
        [-0.3386],
        [-1.4826],
        [-0.3795],
        [ 0.4520],
        [ 1.4420],
        [-1.3168],
        [ 0.4396],
        [-0.5998],
        [ 0.0095],
        [ 0.1267],
        [ 0.3994],
        [ 0.1786],
        [ 0.2432],
        [-0.1201],
        [ 1.4926],
        [ 0.0368],
        [-0.3390],
        [-0.6133]], device='cuda:0')
tensor([[ 0.5673],
        [-0.0312],
        [ 0.0208],
        [-0.2131],
        [ 0.9802],
        [ 0.6979],
        [ 1.3159],
        [-0.0181],
        [ 1.4413],
        [-0.0181],
        [ 0.8703],
        [-0.2622],
        [ 0.8282],
        [-0.5804],
        [-0.1851],
        [-1.2135],
        [ 1.0130],
        [-0.2238],
        [-0.0824],
        [ 0.3165],
        [-0.1209],
        [-0.3139],
        [-0.0052],
        [ 0.1621],
        [-1.6650],
        [ 1.0150],
        [ 0.4844],
        [-0.0695],
        [ 0.0721],
        [-0.9833],
        [ 0.8848],
        [-0.1210],
        [-0.3528],
        [-0.4433],
        [ 0.1496],
        [-0.5725],
        [-0.6250],
        [ 0.0079],
        [ 0.2792],
        [-0.1861],
        [-0.1474],
        [-0.0181],
        [-0.3285],
        [-1.4671],
        [-0.3686],
        [ 0.4625],
        [ 1.4509],
        [-1.3013],
        [ 0.4489],
        [-0.5884],
        [ 0.0208],
        [ 0.1376],
        [ 0.4099],
        [ 0.1892],
        [ 0.2539],
        [-0.1088],
        [ 1.4970],
        [ 0.0464],
        [-0.3278],
        [-0.5993]], device='cuda:0')
/root/DNNM/mach5 baseline/run.py:248: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
  fig, ax = plt.subplots()
 40%|███████████████████████████████████████▏                                                          | 2/5 [16:49<24:47, 495.88s/it]/root/DNNM/mach5 baseline/run.py:190: RuntimeWarning: More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.
  fig, ax = plt.subplots()
tensor([[ 5.6985e-01],
        [-2.7390e-02],
        [ 2.5104e-02],
        [-2.1071e-01],
        [ 9.8328e-01],
        [ 7.0130e-01],
        [ 1.3197e+00],
        [-1.4353e-02],
        [ 1.4484e+00],
        [-1.4731e-02],
        [ 8.7487e-01],
        [-2.5981e-01],
        [ 8.3068e-01],
        [-5.8038e-01],
        [-1.8341e-01],
        [-1.2166e+00],
        [ 1.0171e+00],
        [-2.2148e-01],
        [-7.9501e-02],
        [ 3.1945e-01],
        [-1.1839e-01],
        [-3.1151e-01],
        [-1.5480e-03],
        [ 1.6621e-01],
        [-1.6679e+00],
        [ 1.0211e+00],
        [ 4.8699e-01],
        [-6.6931e-02],
        [ 7.4582e-02],
        [-9.8309e-01],
        [ 8.8925e-01],
        [-1.1783e-01],
        [-3.5000e-01],
        [-4.4050e-01],
        [ 1.5416e-01],
        [-5.6957e-01],
        [-6.2294e-01],
        [ 1.1025e-02],
        [ 2.8261e-01],
        [-1.8330e-01],
        [-1.4372e-01],
        [-1.3796e-02],
        [-3.2481e-01],
        [-1.4672e+00],
        [-3.6574e-01],
        [ 4.6576e-01],
        [ 1.4560e+00],
        [-1.2998e+00],
        [ 4.5292e-01],
        [-5.8510e-01],
        [ 2.3594e-02],
        [ 1.4062e-01],
        [ 4.1313e-01],
        [ 1.9265e-01],
        [ 2.5750e-01],
        [-1.0602e-01],
        [ 1.5062e+00],
        [ 4.9721e-02],
        [-3.2604e-01],
        [-5.9835e-01]], device='cuda:0')
tensor([[ 0.5673],
        [-0.0312],
        [ 0.0208],
        [-0.2131],
        [ 0.9802],
        [ 0.6979],
        [ 1.3159],
        [-0.0181],
        [ 1.4413],
        [-0.0181],
        [ 0.8703],
        [-0.2622],
        [ 0.8282],
        [-0.5804],
        [-0.1851],
        [-1.2135],
        [ 1.0130],
        [-0.2238],
        [-0.0824],
        [ 0.3165],
        [-0.1209],
        [-0.3139],
        [-0.0052],
        [ 0.1621],
        [-1.6650],
        [ 1.0150],
        [ 0.4844],
        [-0.0695],
        [ 0.0721],
        [-0.9833],
        [ 0.8848],
        [-0.1210],
        [-0.3528],
        [-0.4433],
        [ 0.1496],
        [-0.5725],
        [-0.6250],
        [ 0.0079],
        [ 0.2792],
        [-0.1861],
        [-0.1474],
        [-0.0181],
        [-0.3285],
        [-1.4671],
        [-0.3686],
        [ 0.4625],
        [ 1.4509],
        [-1.3013],
        [ 0.4489],
        [-0.5884],
        [ 0.0208],
        [ 0.1376],
        [ 0.4099],
        [ 0.1892],
        [ 0.2539],
        [-0.1088],
        [ 1.4970],
        [ 0.0464],
        [-0.3278],
        [-0.5993]], device='cuda:0')
 60%|██████████████████████████████████████████████████████████▊                                       | 3/5 [24:23<15:53, 476.67s/it]
tensor([[ 0.5647],
        [-0.0342],
        [ 0.0186],
        [-0.2168],
        [ 0.9768],
        [ 0.6952],
        [ 1.3128],
        [-0.0204],
        [ 1.4408],
        [-0.0201],
        [ 0.8688],
        [-0.2652],
        [ 0.8247],
        [-0.5857],
        [-0.1891],
        [-1.2200],
        [ 1.0102],
        [-0.2272],
        [-0.0855],
        [ 0.3135],
        [-0.1244],
        [-0.3172],
        [-0.0075],
        [ 0.1601],
        [-1.6726],
        [ 1.0127],
        [ 0.4803],
        [-0.0729],
        [ 0.0684],
        [-0.9878],
        [ 0.8817],
        [-0.1241],
        [-0.3564],
        [-0.4468],
        [ 0.1475],
        [-0.5754],
        [-0.6286],
        [ 0.0051],
        [ 0.2765],
        [-0.1895],
        [-0.1501],
        [-0.0202],
        [-0.3311],
        [-1.4725],
        [-0.3722],
        [ 0.4593],
        [ 1.4473],
        [-1.3053],
        [ 0.4463],
        [-0.5913],
        [ 0.0174],
        [ 0.1343],
        [ 0.4068],
        [ 0.1863],
        [ 0.2512],
        [-0.1120],
        [ 1.4967],
        [ 0.0432],
        [-0.3323],
        [-0.6037]], device='cuda:0')
tensor([[ 0.5673],
        [-0.0312],
        [ 0.0208],
        [-0.2131],
        [ 0.9802],
        [ 0.6979],
        [ 1.3159],
        [-0.0181],
        [ 1.4413],
        [-0.0181],
        [ 0.8703],
        [-0.2622],
        [ 0.8282],
        [-0.5804],
        [-0.1851],
        [-1.2135],
        [ 1.0130],
        [-0.2238],
        [-0.0824],
        [ 0.3165],
        [-0.1209],
        [-0.3139],
        [-0.0052],
        [ 0.1621],
        [-1.6650],
        [ 1.0150],
        [ 0.4844],
        [-0.0695],
        [ 0.0721],
        [-0.9833],
        [ 0.8848],
        [-0.1210],
        [-0.3528],
        [-0.4433],
        [ 0.1496],
        [-0.5725],
        [-0.6250],
        [ 0.0079],
        [ 0.2792],
        [-0.1861],
        [-0.1474],
        [-0.0181],
        [-0.3285],
        [-1.4671],
        [-0.3686],
        [ 0.4625],
        [ 1.4509],
        [-1.3013],
        [ 0.4489],
        [-0.5884],
        [ 0.0208],
        [ 0.1376],
        [ 0.4099],
        [ 0.1892],
        [ 0.2539],
        [-0.1088],
        [ 1.4970],
        [ 0.0464],
        [-0.3278],

 80%|██████████████████████████████████████████████████████████████████████████████▍                   | 4/5 [31:57<07:47, 467.50s/it]
tensor([[ 0.5699],
        [-0.0296],
        [ 0.0223],
        [-0.2131],
        [ 0.9811],
        [ 0.6984],
        [ 1.3178],
        [-0.0175],
        [ 1.4458],
        [-0.0181],
        [ 0.8723],
        [-0.2625],
        [ 0.8286],
        [-0.5816],
        [-0.1855],
        [-1.2179],
        [ 1.0160],
        [-0.2237],
        [-0.0818],
        [ 0.3173],
        [-0.1203],
        [-0.3134],
        [-0.0040],
        [ 0.1636],
        [-1.6669],
        [ 1.0178],
        [ 0.4837],
        [-0.0701],
        [ 0.0710],
        [-0.9847],
        [ 0.8854],
        [-0.1213],
        [-0.3534],
        [-0.4435],
        [ 0.1509],
        [-0.5717],
        [-0.6248],
        [ 0.0085],
        [ 0.2800],
        [-0.1859],
        [-0.1466],
        [-0.0166],
        [-0.3276],
        [-1.4685],
        [-0.3682],
        [ 0.4633],
        [ 1.4537],
        [-1.3014],
        [ 0.4507],
        [-0.5877],
        [ 0.0214],
        [ 0.1381],
        [ 0.4105],
        [ 0.1901],
        [ 0.2551],
        [-0.1087],
        [ 1.5022],
        [ 0.0465],
        [-0.3288],
        [-0.5997]], device='cuda:0')
tensor([[ 0.5673],
        [-0.0312],
        [ 0.0208],
        [-0.2131],
        [ 0.9802],
        [ 0.6979],
        [ 1.3159],
        [-0.0181],
        [ 1.4413],
        [-0.0181],
        [ 0.8703],
        [-0.2622],
        [ 0.8282],
        [-0.5804],
        [-0.1851],
        [-1.2135],
        [ 1.0130],
        [-0.2238],
        [-0.0824],
        [ 0.3165],
        [-0.1209],
        [-0.3139],
        [-0.0052],
        [ 0.1621],
        [-1.6650],
        [ 1.0150],
        [ 0.4844],
        [-0.0695],
        [ 0.0721],
        [-0.9833],
        [ 0.8848],
        [-0.1210],
        [-0.3528],
        [-0.4433],
        [ 0.1496],
        [-0.5725],
        [-0.6250],
        [ 0.0079],
        [ 0.2792],
        [-0.1861],
        [-0.1474],
        [-0.0181],
        [-0.3285],
        [-1.4671],
        [-0.3686],
        [ 0.4625],
        [ 1.4509],
        [-1.3013],
        [ 0.4489],
        [-0.5884],
        [ 0.0208],
        [ 0.1376],
        [ 0.4099],
        [ 0.1892],
        [ 0.2539],
        [-0.1088],
        [ 1.4970],
        [ 0.0464],
        [-0.3278],

100%|██████████████████████████████████████████████████████████████████████████████████████████████████| 5/5 [39:31<00:00, 474.21s/it]