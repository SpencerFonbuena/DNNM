use device: cuda:0
use device: cuda:0
data structure: [lines, timesteps, features]
train data size: [(122030, 120, 1)]
mytest data size: [(21356, 120, 1)]
Number of classes: 4
/root/ml/lib/python3.10/site-packages/torch/cuda/__init__.py:546: UserWarning: Can't initialize NVML
  warnings.warn("Can't initialize NVML")
Traceback (most recent call last):
  File "/root/DNNM/mach5 baseline/infer.py", line 159, in <module>
    infer()
  File "/root/DNNM/mach5 baseline/infer.py", line 136, in infer
    predictions = run_encoder_decoder_inference(model=net,
  File "/root/DNNM/mach5 baseline/module/layers.py", line 242, in run_encoder_decoder_inference
    print(scaler.inverse_transform(tgt.reshape(1,-1)))
  File "/root/ml/lib/python3.10/site-packages/sklearn/preprocessing/_data.py", line 1034, in inverse_transform
    X = check_array(
  File "/root/ml/lib/python3.10/site-packages/sklearn/utils/validation.py", line 879, in check_array
    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)
  File "/root/ml/lib/python3.10/site-packages/sklearn/utils/_array_api.py", line 185, in _asarray_with_order
    array = numpy.asarray(array, order=order, dtype=dtype)
  File "/root/ml/lib/python3.10/site-packages/torch/_tensor.py", line 972, in __array__
    return self.numpy().astype(dtype, copy=False)
TypeError: can't convert cuda:0 device type tensor to numpy. Use Tensor.cpu() to copy the tensor to host memory first.