data structure: [lines, timesteps, features]
train data size: [(122053, 120, 1)]
mytest data size: [(21360, 120, 1)]
Number of classes: 4
  0%|                                                                                                                                                                                                                                                    | 0/20 [00:00<?, ?it/s]/root/ml/lib/python3.10/site-packages/torch/nn/modules/loss.py:536: UserWarning: Using a target size (torch.Size([64, 60, 1])) that is different to the input size (torch.Size([64, 60, 9])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.
  return F.mse_loss(input, target, reduction=self.reduction)
/root/DNNM/mach5 baseline/run.py:202: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  pre = torch.tensor(y_pre).cpu().detach().numpy()[0].squeeze()
/root/DNNM/mach5 baseline/run.py:203: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  act = torch.tensor(y).cpu().detach().numpy()[0].squeeze()
  5%|███████████▋                                                                                                                                                                                                                             | 1/20 [13:15<4:11:53, 795.42s/it]
Traceback (most recent call last):
  File "/root/DNNM/mach5 baseline/run.py", line 261, in <module>
    train()
  File "/root/DNNM/mach5 baseline/run.py", line 195, in train
    torch.nn.utils.clip_grad_norm_(net.parameters(), .5)
KeyboardInterrupt